import { authService } from '@/services/api/auth';
import { LoginCredentials } from '@/types';
import AsyncStorage from '@react-native-async-storage/async-storage';
import React, { createContext, ReactNode, useCallback, useContext, useEffect, useMemo, useState } from 'react';

export interface User {
  id: number;
  name: string;
  email: string;
  role: 'ADMIN' | 'MASTER' | 'MANAGER';
  role_name: string;
  created_at: string;
  updated_at: string;
}

interface AuthState {
  isAuthenticated: boolean;
  accessToken: string | null;
  user: User | null;
  loading: boolean;
}

interface AuthContextType extends AuthState {
  login: (credentials: LoginCredentials) => Promise<void>;
  logout: () => Promise<void>;
  setUser: (user: User) => void;
  setLoading: (loading: boolean) => void;
  clearAuth: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [authState, setAuthState] = useState<AuthState>({
    isAuthenticated: false,
    accessToken: null,
    user: null,
    loading: true,
  });

  // Ïï± ÏãúÏûëÏãú Ï†ÄÏû•Îêú Ïù∏Ï¶ù Ï†ïÎ≥¥ Î°úÎìú
  useEffect(() => {
    const initializeAuth = async () => {
      try {
        const storedData = await AsyncStorage.getItem('auth-storage');
        if (storedData) {
          const parsedData = JSON.parse(storedData);
          setAuthState({
            isAuthenticated: parsedData.isAuthenticated || false,
            accessToken: parsedData.accessToken || null,
            user: parsedData.user || null,
            loading: false,
          });
        } else {
          setAuthState(prev => ({ ...prev, loading: false }));
        }
      } catch (error) {
        console.error('Failed to load stored auth:', error);
        setAuthState(prev => ({ ...prev, loading: false }));
      }
    };

    initializeAuth();
  }, []); // Îπà ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥Î°ú Ìïú Î≤àÎßå Ïã§Ìñâ

  const saveAuthToStorage = async (data: Partial<AuthState>) => {
    try {
      const dataToSave = {
        isAuthenticated: data.isAuthenticated,
        accessToken: data.accessToken,
        user: data.user,
      };
      await AsyncStorage.setItem('auth-storage', JSON.stringify(dataToSave));
    } catch (error) {
      console.error('Failed to save auth to storage:', error);
    }
  };

  const login = useCallback(async (credentials: LoginCredentials) => {
    try {
      console.log('üü° AuthContext.login Ìò∏Ï∂úÎê® - ÏãúÏûë:', credentials.email);
      console.log('üü° AuthContext: setLoading(true) Ìò∏Ï∂ú');
      setAuthState(prev => ({ ...prev, loading: true }));
      
      console.log('üü° AuthContext: authService.login Ìò∏Ï∂ú ÏßÅÏ†Ñ');
      const { token, user } = await authService.login(credentials);
      console.log('üü° AuthContext: authService.login ÏôÑÎ£å, Í≤∞Í≥º Î∞õÏùå');
      console.log('üü° AuthContext: API Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ, ContextÏóê Ï†ÄÏû• Ï§ë');
      
      const newState = {
        isAuthenticated: true,
        accessToken: token.access_token,
        user,
        loading: false,
      };
      console.log('üü° AuthContext: ÏÉàÎ°úÏö¥ ÏÉÅÌÉú ÏÑ§Ï†ï');
      setAuthState(newState);
      await saveAuthToStorage(newState);
      console.log('üü° AuthContext: Î°úÍ∑∏Ïù∏ ÏôÑÎ£å');
    } catch (error: any) {
      console.error('üü° AuthContext: Î°úÍ∑∏Ïù∏ Ïã§Ìå®:', error);
      setAuthState(prev => ({ ...prev, loading: false }));
      throw error;
    }
  }, []);

  const logout = useCallback(async () => {
    console.log('üö™ Î°úÍ∑∏ÏïÑÏõÉ ÏãúÏûë');
    
    try {
      // API ÏÑúÎ≤ÑÏóê Î°úÍ∑∏ÏïÑÏõÉ ÏöîÏ≤≠ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
      // await authService.logout();
    } catch (error) {
      console.error('ÏÑúÎ≤Ñ Î°úÍ∑∏ÏïÑÏõÉ ÏöîÏ≤≠ Ïã§Ìå®:', error);
      // ÏÑúÎ≤Ñ ÏöîÏ≤≠ Ïã§Ìå®Ìï¥ÎèÑ Î°úÏª¨ Î°úÍ∑∏ÏïÑÏõÉÏùÄ ÏßÑÌñâ
    }
    
    const newState = {
      isAuthenticated: false,
      accessToken: null,
      user: null,
      loading: false,
    };
    
    // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    setAuthState(newState);
    
    // AsyncStorageÏóêÏÑú Ïù∏Ï¶ù Ï†ïÎ≥¥ ÏôÑÏ†Ñ ÏÇ≠Ï†ú
    try {
      await AsyncStorage.multiRemove(['auth-storage', 'auth-token', 'refresh-token']);
      console.log('‚úÖ Î°úÏª¨ Ïù∏Ï¶ù Ï†ïÎ≥¥ ÏÇ≠Ï†ú ÏôÑÎ£å');
    } catch (error) {
      console.error('AsyncStorage ÏÇ≠Ï†ú Ïã§Ìå®:', error);
    }
    
    console.log('üö™ Î°úÍ∑∏ÏïÑÏõÉ ÏôÑÎ£å');
  }, []);

  const setUser = useCallback((user: User) => {
    setAuthState(prev => {
      const newState = { ...prev, user };
      // ÎπÑÎèôÍ∏∞ Ìï®ÏàòÎ•º ÎèôÍ∏∞Ï†ÅÏúºÎ°ú Ìò∏Ï∂úÌïòÏßÄ ÏïäÎèÑÎ°ù ÏàòÏ†ï
      saveAuthToStorage(newState).catch(error => {
        console.error('Failed to save user to storage:', error);
      });
      return newState;
    });
  }, []);

  const setLoading = useCallback((loading: boolean) => {
    setAuthState(prev => ({ ...prev, loading }));
  }, []);

  const clearAuth = useCallback(async () => {
    await logout();
  }, [logout]);

  const contextValue: AuthContextType = useMemo(() => ({
    ...authState,
    login,
    logout,
    setUser,
    setLoading,
    clearAuth,
  }), [authState, login, logout, setUser, setLoading, clearAuth]);

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuthStore = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuthStore must be used within an AuthProvider');
  }
  return context;
};
